{
  "specName": "moonriver",
  "implName": "moonriver",
  "authoringVersion": 3,
  "specVersion": 1605,
  "implVersion": 0,
  "apis": [
    [
      "0xd2bc9897eed08f15",
      3
    ],
    [
      "0xdf6acb689907609b",
      4
    ],
    [
      "0x37e397fc7c91f5e4",
      1
    ],
    [
      "0x40fe3ad401f8959a",
      6
    ],
    [
      "0xf78b278be53f454c",
      2
    ],
    [
      "0xab3c0572291feb8b",
      1
    ],
    [
      "0xbc9d89904f5b923f",
      1
    ],
    [
      "0xbd78255d4feeea1f",
      4
    ],
    [
      "0xa33d43f58731ad84",
      2
    ],
    [
      "0x582211f65bb14b89",
      4
    ],
    [
      "0xe65b00e46cedd0aa",
      2
    ],
    [
      "0x37c8bb1350a9a2a8",
      1
    ],
    [
      "0x2aa62120049dd2d2",
      1
    ],
    [
      "0x1fba3ffbb7e07e8d",
      2
    ],
    [
      "0xea93e3f16f3d6962",
      2
    ]
  ],
  "transactionVersion": 2
}{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "account",
                "AccountId20"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 1,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 2,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 4,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 6,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 8,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 10,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 11,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 12,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 13,
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 13,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 14
                }
              },
              "docs": []
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 15,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 15,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 15,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 15,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 16,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 17
                }
              },
              "docs": []
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 18
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 137,
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": 18,
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 58,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "moonriver_runtime",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 19,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 31,
                          "typeName": "parachain_staking::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "AuthorFilter",
                      "fields": [
                        {
                          "name": null,
                          "type": 38,
                          "typeName": "pallet_author_slot_filter::Event",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "AuthorMapping",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "pallet_author_mapping::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "MoonbeamOrbiters",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "pallet_moonbeam_orbiters::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 46,
                          "typeName": "pallet_utility::Event",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 49,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "MaintenanceMode",
                      "fields": [
                        {
                          "name": null,
                          "type": 52,
                          "typeName": "pallet_maintenance_mode::Event",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 53,
                          "typeName": "pallet_identity::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Migrations",
                      "fields": [
                        {
                          "name": null,
                          "type": 54,
                          "typeName": "pallet_migrations::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "pallet_evm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 61,
                          "typeName": "pallet_ethereum::Event",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "pallet_base_fee::Event",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "pallet_democracy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "CouncilCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 80,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "TechCommitteeCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 81,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "CrowdloanRewards",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "pallet_crowdloan_rewards::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "pallet_xcm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "pallet_assets::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "AssetManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 129,
                          "typeName": "pallet_asset_manager::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 132,
                          "typeName": "orml_xtokens::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "XcmTransactor",
                      "fields": [
                        {
                          "name": null,
                          "type": 133,
                          "typeName": "xcm_transactor::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "LocalAssets",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 20,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 23,
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": 20,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 21,
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": 22,
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "TransactionalError",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 15,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NoLayer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "RelayChainBlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed.",
                        "\\[ count \\]"
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "relay_chain::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight.",
                        "\\[ weight_used, result_mqc_head \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": 30,
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "name": "starting_block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "selected_collators_number",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "total_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Started new round."
                      ]
                    },
                    {
                      "name": "JoinedCollatorCandidates",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "new_total_amt_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Account joined the set of collator candidates."
                      ]
                    },
                    {
                      "name": "CollatorChosen",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "collator_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_exposed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Candidate selected for collators. Total Exposed Amount includes all delegations."
                      ]
                    },
                    {
                      "name": "CandidateBondLessRequested",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount_to_decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Candidate requested to decrease a self bond."
                      ]
                    },
                    {
                      "name": "CandidateBondedMore",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "new_total_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Candidate has increased a self bond."
                      ]
                    },
                    {
                      "name": "CandidateBondedLess",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "new_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Candidate has decreased a self bond."
                      ]
                    },
                    {
                      "name": "CandidateWentOffline",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Candidate temporarily leave the set of collator candidates without unbonding."
                      ]
                    },
                    {
                      "name": "CandidateBackOnline",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Candidate rejoins the set of collator candidates."
                      ]
                    },
                    {
                      "name": "CandidateScheduledExit",
                      "fields": [
                        {
                          "name": "exit_allowed_round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Candidate has requested to leave the set of candidates."
                      ]
                    },
                    {
                      "name": "CancelledCandidateExit",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Cancelled request to leave the set of candidates."
                      ]
                    },
                    {
                      "name": "CancelledCandidateBondLess",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancelled request to decrease candidate's bond."
                      ]
                    },
                    {
                      "name": "CandidateLeft",
                      "fields": [
                        {
                          "name": "ex_candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unlocked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "new_total_amt_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Candidate has left the set of candidates."
                      ]
                    },
                    {
                      "name": "DelegationDecreaseScheduled",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount_to_decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Delegator requested to decrease a bond for the collator candidate."
                      ]
                    },
                    {
                      "name": "DelegationIncreased",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "in_top",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DelegationDecreased",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "in_top",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "DelegatorExitScheduled",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Delegator requested to leave the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationRevocationScheduled",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Delegator requested to revoke delegation."
                      ]
                    },
                    {
                      "name": "DelegatorLeft",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Delegator has left the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationRevoked",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Delegation revoked."
                      ]
                    },
                    {
                      "name": "DelegationKicked",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Delegation kicked."
                      ]
                    },
                    {
                      "name": "DelegatorExitCancelled",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancelled a pending request to exit the set of delegators."
                      ]
                    },
                    {
                      "name": "CancelledDelegationRequest",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "cancelled_request",
                          "type": 33,
                          "typeName": "CancelledScheduledRequest<BalanceOf<T>>",
                          "docs": []
                        },
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancelled request to change an existing delegation."
                      ]
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "locked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegator_position",
                          "type": 35,
                          "typeName": "DelegatorAdded<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "New delegation (increase of the existing one)."
                      ]
                    },
                    {
                      "name": "DelegatorLeftCandidate",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "total_candidate_staked",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Delegation from candidate state has been remove."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rewards",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Paid the account (delegator or collator) the balance as liquid rewards."
                      ]
                    },
                    {
                      "name": "ReservedForParachainBond",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transferred to account which holds funds reserved for parachain bond."
                      ]
                    },
                    {
                      "name": "ParachainBondAccountSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Account (re)set for parachain bond treasury."
                      ]
                    },
                    {
                      "name": "ParachainBondReservePercentSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 36,
                          "typeName": "Percent",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 36,
                          "typeName": "Percent",
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Percent of inflation reserved for parachain bond (re)set."
                      ]
                    },
                    {
                      "name": "InflationSet",
                      "fields": [
                        {
                          "name": "annual_min",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "annual_ideal",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "annual_max",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "round_min",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "round_ideal",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "round_max",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"
                      ]
                    },
                    {
                      "name": "StakeExpectationsSet",
                      "fields": [
                        {
                          "name": "expect_min",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "expect_ideal",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "expect_max",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Staking expectations set."
                      ]
                    },
                    {
                      "name": "TotalSelectedSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Set total selected candidates to this value."
                      ]
                    },
                    {
                      "name": "CollatorCommissionSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Set collator commission to this value."
                      ]
                    },
                    {
                      "name": "BlocksPerRoundSet",
                      "fields": [
                        {
                          "name": "current_round",
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        },
                        {
                          "name": "first_block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "old",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "new_per_round_inflation_min",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "new_per_round_inflation_ideal",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        },
                        {
                          "name": "new_per_round_inflation_max",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Set blocks per round"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "CancelledScheduledRequest"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 34,
                      "typeName": "DelegationAction<Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "DelegationAction"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Revoke",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Decrease",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegatorAdded"
              ],
              "params": [
                {
                  "name": "B",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddedToTop",
                      "fields": [
                        {
                          "name": "new_total",
                          "type": 6,
                          "typeName": "B",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AddedToBottom",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "pallet_author_slot_filter",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EligibleUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "EligibilityValue",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount of eligible authors for the filter to select has been changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_author_slot_filter",
                "num",
                "NonZeroU32"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_author_mapping",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "KeysRegistered",
                      "fields": [
                        {
                          "name": "nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "keys",
                          "type": 43,
                          "typeName": "T::Keys",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A NimbusId has been registered and mapped to an AccountId."
                      ]
                    },
                    {
                      "name": "KeysRemoved",
                      "fields": [
                        {
                          "name": "nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "keys",
                          "type": 43,
                          "typeName": "T::Keys",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An NimbusId has been de-registered, and its AccountId mapping removed."
                      ]
                    },
                    {
                      "name": "KeysRotated",
                      "fields": [
                        {
                          "name": "new_nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new_keys",
                          "type": 43,
                          "typeName": "T::Keys",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An NimbusId has been registered, replacing a previous registration and its mapping."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "nimbus_primitives",
                "nimbus_crypto",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 42,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "session_keys_primitives",
                "vrf",
                "vrf_crypto",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 42,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_moonbeam_orbiters",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OrbiterJoinCollatorPool",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "orbiter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An orbiter join a collator pool"
                      ]
                    },
                    {
                      "name": "OrbiterLeaveCollatorPool",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "orbiter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An orbiter leave a collator pool"
                      ]
                    },
                    {
                      "name": "OrbiterRewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rewards",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Paid the orbiter account the balance as liquid rewards."
                      ]
                    },
                    {
                      "name": "OrbiterRotation",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "old_orbiter",
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "new_orbiter",
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "OrbiterRegistered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An orbiter has registered"
                      ]
                    },
                    {
                      "name": "OrbiterUnregistered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An orbiter has unregistered"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 23,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 48
                },
                {
                  "name": "E",
                  "type": 23
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 48,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": []
              },
              "docs": []
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "moonriver_runtime",
                "ProxyType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Governance",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Staking",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "CancelProxy",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "AuthorMapping",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 51,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_maintenance_mode",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EnteredMaintenanceMode",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The chain was put into Maintenance Mode"
                      ]
                    },
                    {
                      "name": "NormalOperationResumed",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The chain returned to its normal operating state"
                      ]
                    },
                    {
                      "name": "FailedToSuspendIdleXcmExecution",
                      "fields": [
                        {
                          "name": "error",
                          "type": 23,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The call to suspend on_idle XCM execution failed with inner error"
                      ]
                    },
                    {
                      "name": "FailedToResumeIdleXcmExecution",
                      "fields": [
                        {
                          "name": "error",
                          "type": 23,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call to resume on_idle XCM execution failed with inner error"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "pallet_migrations",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RuntimeUpgradeStarted",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Runtime upgrade started"
                      ]
                    },
                    {
                      "name": "RuntimeUpgradeCompleted",
                      "fields": [
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Runtime upgrade completed"
                      ]
                    },
                    {
                      "name": "MigrationStarted",
                      "fields": [
                        {
                          "name": "migration_name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Migration started"
                      ]
                    },
                    {
                      "name": "MigrationCompleted",
                      "fields": [
                        {
                          "name": "migration_name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "consumed_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Migration completed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": null,
                          "type": 56,
                          "typeName": "Log",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given \\[address\\]."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A \\[contract\\] was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A \\[contract\\] has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A \\[contract\\] has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    },
                    {
                      "name": "BalanceDeposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A deposit has been made at a given address. \\[sender, address, value\\]"
                      ]
                    },
                    {
                      "name": "BalanceWithdraw",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A withdrawal has been made from a given address. \\[sender, address, value\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 57,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 58,
                      "typeName": "Vec<H256>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "Bytes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 58,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": []
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 60,
                      "typeName": "[u64; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 60,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 8
                }
              },
              "docs": []
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "ExitReason",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed. [from, to/contract_address, transaction_hash, exit_reason]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 63,
                          "typeName": "ExitSucceed",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "ExitRevert",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "ExitFatal",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Returned",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Suicided",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 66
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 66,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 66,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "IsActive",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 72,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 72,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 74,
                          "typeName": "LookupError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BadFormat",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "depositors",
                          "type": 76,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 77,
                          "typeName": "VoteThreshold",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 78,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An account has secconded a proposal"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": []
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "SimpleMajority",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 79,
                          "typeName": "Vote",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 47,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "pallet_crowdloan_rewards",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InitialPaymentMade",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The initial payment of InitializationPayment % was paid"
                      ]
                    },
                    {
                      "name": "NativeIdentityAssociated",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "T::RelayChainAccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Someone has proven they made a contribution and associated a native identity with it.",
                        "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"
                      ]
                    },
                    {
                      "name": "RewardsPaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contributor has claimed some rewards.",
                        "Data is the account getting paid and the amount of rewards paid."
                      ]
                    },
                    {
                      "name": "RewardAddressUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contributor has updated the reward address."
                      ]
                    },
                    {
                      "name": "InitializedAlreadyInitializedAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "T::RelayChainAccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "When initializing the reward vec an already initialized account was found"
                      ]
                    },
                    {
                      "name": "InitializedAccountWithNotEnoughContribution",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "T::RelayChainAccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "When initializing the reward vec an already initialized account was found"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some XCM was executed ok."
                      ]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "XcmError",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some XCM failed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM version used."
                      ]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bad XCM format used."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "ParaId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "RelayBlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Unimplemented",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "MultiLocationFull",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "InvalidLocation",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AssetNotFound",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "NotWithdrawable",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "LocationCannotHold",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DestinationUnsupported",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Transport",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Unroutable",
                      "fields": [],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "UnknownClaim",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "FailedToDecode",
                      "fields": [],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "fields": [],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "NotHoldingFees",
                      "fields": [],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "TooExpensive",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "fields": [],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Barrier",
                      "fields": [],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "WeightNotComputable",
                      "fields": [],
                      "index": 25,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "[u8; 8]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 90,
                          "typeName": "Outcome",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Outcome"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "Error",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "Error",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 90,
                          "typeName": "Outcome",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached.",
                        "\\[ id, remaining, required \\]"
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue.",
                        "\\[ id, index, required \\]"
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed.",
                        "\\[ index, used \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": null,
                          "type": 90,
                          "typeName": "xcm::latest::Outcome",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 121,
                          "typeName": "Option<MultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "VersionedMultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "XcmError",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 127,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "MultiLocation"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "interior",
                      "type": 94,
                      "typeName": "Junctions",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "Junctions"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "xcm",
                "v1",
                "junction",
                "Junction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 1,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 100,
                          "typeName": "BodyId",
                          "docs": []
                        },
                        {
                          "name": "part",
                          "type": 101,
                          "typeName": "BodyPart",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 96,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "NetworkId"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Polkadot",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Kusama",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 98,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 8
                }
              },
              "docs": []
            }
          },
          {
            "id": 99,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyId"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Executive",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Technical",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Legislative",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Judicial",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyPart"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 103,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 103,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 104
                }
              },
              "docs": []
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 112,
                          "typeName": "Response",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 116,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 107,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 102,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 102,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "ClearError",
                      "fields": [],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "ticket",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 27,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssets"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 106,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 106,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 107
                }
              },
              "docs": []
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAsset"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 108,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 109,
                      "typeName": "Fungibility",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetId"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "Fungibility"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 110,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetInstance"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "name": null,
                          "type": 15,
                          "typeName": "[u8; 4]",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "name": null,
                          "type": 111,
                          "typeName": "[u8; 16]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 111,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "Option<(u32, Error)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 114
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 114,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 114,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  86
                ]
              },
              "docs": []
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "v0",
                "OriginKind"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SovereignAccount",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Superuser",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Xcm",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 11,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssetFilter"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "name": null,
                          "type": 118,
                          "typeName": "WildMultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildMultiAsset"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 108,
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "fun",
                          "type": 119,
                          "typeName": "WildFungibility",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildFungibility"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonFungible",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 93
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "Vec<v0::MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "v1::MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 123,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 124
                }
              },
              "docs": []
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_asset",
                "MultiAsset"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AllFungible",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AllNonFungible",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "instance",
                          "type": 110,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "instance",
                          "type": 110,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_location",
                "MultiLocation"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "Junction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 97,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 1,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 100,
                          "typeName": "BodyId",
                          "docs": []
                        },
                        {
                          "name": "part",
                          "type": 101,
                          "typeName": "BodyPart",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 125,
                          "typeName": "v0::MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "v1::MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_asset_manager",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ForeignAssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 131,
                          "typeName": "T::AssetRegistrarMetadata",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New asset with the asset manager is registered"
                      ]
                    },
                    {
                      "name": "UnitsPerSecondChanged",
                      "fields": [
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "units_per_second",
                          "type": 6,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Changed the amount of units we are charging per execution second for a given asset"
                      ]
                    },
                    {
                      "name": "ForeignAssetTypeChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "new_asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Changed the xcm type mapping for a given asset id"
                      ]
                    },
                    {
                      "name": "ForeignAssetRemoved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Removed all information related to an assetId"
                      ]
                    },
                    {
                      "name": "SupportedAssetRemoved",
                      "fields": [
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Supported asset type for fee payment removed"
                      ]
                    },
                    {
                      "name": "LocalAssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Local asset was created"
                      ]
                    },
                    {
                      "name": "ForeignAssetDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Removed all information related to an assetId and destroyed asset"
                      ]
                    },
                    {
                      "name": "LocalAssetDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Removed all information related to an assetId and destroyed asset"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "moonriver_runtime",
                "xcm_config",
                "AssetType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "moonriver_runtime",
                "asset_config",
                "AssetRegistrarMetadata"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 11,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "type": 11,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 107,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transferred `MultiAsset` with fee."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "xcm_transactor",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactedDerivative",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transacted the inner call through a derivative account in a destination chain."
                      ]
                    },
                    {
                      "name": "TransactedSovereign",
                      "fields": [
                        {
                          "name": "fee_payer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transacted the call through the sovereign account in a destination chain."
                      ]
                    },
                    {
                      "name": "TransactedSigned",
                      "fields": [
                        {
                          "name": "fee_payer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transacted the call through a signed account in a destination chain."
                      ]
                    },
                    {
                      "name": "RegisteredDerivative",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Registered a derivative index for an account id."
                      ]
                    },
                    {
                      "name": "DeRegisteredDerivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransactFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 86,
                          "typeName": "XcmError",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transact failed"
                      ]
                    },
                    {
                      "name": "TransactInfoChanged",
                      "fields": [
                        {
                          "name": "location",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "remote_info",
                          "type": 134,
                          "typeName": "RemoteTransactInfoWithMaxWeight",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Changed the transact info of a location"
                      ]
                    },
                    {
                      "name": "TransactInfoRemoved",
                      "fields": [
                        {
                          "name": "location",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Removed the transact info of a location"
                      ]
                    },
                    {
                      "name": "DestFeePerSecondChanged",
                      "fields": [
                        {
                          "name": "location",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "fee_per_second",
                          "type": 6,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set dest fee per second"
                      ]
                    },
                    {
                      "name": "DestFeePerSecondRemoved",
                      "fields": [
                        {
                          "name": "location",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove dest fee per second"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "xcm_transactor",
                "pallet",
                "RemoteTransactInfoWithMaxWeight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transact_extra_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "transact_extra_weight_signed",
                      "type": 135,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 138,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 72
                }
              },
              "docs": []
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 96,
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": 66,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 141,
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 143,
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 11,
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 142
                }
              },
              "docs": []
            }
          },
          {
            "id": 142,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  11,
                  11
                ]
              },
              "docs": []
            }
          },
          {
            "id": 143,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 11
                }
              },
              "docs": []
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": 145,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 146
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 146,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 146,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 146,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 135,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": 135,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 135,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 148,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 66,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": 66,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": 151,
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 152
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 152,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 152,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 153
                }
              },
              "docs": []
            }
          },
          {
            "id": 153,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  89,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 156,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 9,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 11,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 158
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 158,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "UpgradeRestriction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 160,
                      "typeName": "BTreeSet<Vec<u8>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 143,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 9,
                      "typeName": "relay_chain::Hash",
                      "docs": []
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 72,
                      "typeName": "(u32, u32)",
                      "docs": []
                    },
                    {
                      "name": "ingress_channels",
                      "type": 162,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    },
                    {
                      "name": "egress_channels",
                      "type": 162,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 162,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 163
                }
              },
              "docs": []
            }
          },
          {
            "id": 163,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  164
                ]
              },
              "docs": []
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHrmpChannel"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "mqc_head",
                      "type": 85,
                      "typeName": "Option<Hash>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHostConfiguration"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "RelayHash",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 87
                },
                {
                  "name": "V",
                  "type": 166
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 168,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 168,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 169
                }
              },
              "docs": []
            }
          },
          {
            "id": 169,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  166
                ]
              },
              "docs": []
            }
          },
          {
            "id": 170,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 171
                }
              },
              "docs": []
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 87
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 87,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 173,
                          "typeName": "ParachainInherentData",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "UpwardMessage",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 155,
                      "typeName": "PersistedValidationData",
                      "docs": []
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 159,
                      "typeName": "sp_trie::StorageProof",
                      "docs": []
                    },
                    {
                      "name": "downward_messages",
                      "type": 174,
                      "typeName": "Vec<InboundDownwardMessage>",
                      "docs": []
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 176,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 174,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 175
                }
              },
              "docs": []
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "msg",
                      "type": 11,
                      "typeName": "DownwardMessage",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 87
                },
                {
                  "name": "V",
                  "type": 177
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 179,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 177,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 178
                }
              },
              "docs": []
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 179,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 180
                }
              },
              "docs": []
            }
          },
          {
            "id": 180,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  177
                ]
              },
              "docs": []
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 58,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 98,
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 185
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 187,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 89,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": 186,
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 187,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 185
                }
              },
              "docs": []
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 189
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 190,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 15
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 15,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 190,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 189
                }
              },
              "docs": []
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_reserved",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 196,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 197
                }
              },
              "docs": []
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "coeff_frac",
                      "type": 37,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "negative",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "ParachainBondConfig"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "percent",
                      "type": 36,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "RoundInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "length",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Nominator2"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegations",
                      "type": 201,
                      "typeName": "OrderedSet<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "revocations",
                      "type": 204,
                      "typeName": "OrderedSet<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "scheduled_revocations_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "scheduled_revocations_total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 205,
                      "typeName": "DelegatorStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 202
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 203,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Bond"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 203,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 202
                }
              },
              "docs": []
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 76,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegatorStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegator"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 201,
                      "typeName": "OrderedSet<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "less_total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 205,
                      "typeName": "DelegatorStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CollatorCandidate"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "delegators",
                      "type": 204,
                      "typeName": "OrderedSet<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "top_delegations",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "bottom_delegations",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "total_counted",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "total_backing",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "request",
                      "type": 208,
                      "typeName": "Option<CandidateBondLessRequest<Balance>>",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 210,
                      "typeName": "CollatorStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 209
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 209,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateBondLessRequest"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CollatorStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Idle",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "RoundIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "delegation_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "total_counted",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lowest_top_delegation_amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "highest_bottom_delegation_amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lowest_bottom_delegation_amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "top_capacity",
                      "type": 212,
                      "typeName": "CapacityStatus",
                      "docs": []
                    },
                    {
                      "name": "bottom_capacity",
                      "type": 212,
                      "typeName": "CapacityStatus",
                      "docs": []
                    },
                    {
                      "name": "request",
                      "type": 208,
                      "typeName": "Option<CandidateBondLessRequest<Balance>>",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 210,
                      "typeName": "CollatorStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CapacityStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Full",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Empty",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Partial",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 213,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 214
                }
              },
              "docs": []
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "ScheduledRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 34,
                      "typeName": "DelegationAction<Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegations",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Collator2"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nominators",
                      "type": 204,
                      "typeName": "OrderedSet<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "top_nominators",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "bottom_nominators",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "total_counted",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "total_backing",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 210,
                      "typeName": "CollatorStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 217,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CollatorSnapshot"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 203,
                      "typeName": "Vec<Bond<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelayedPayout"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_issuance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "total_staking_reward",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "collator_commission",
                      "type": 37,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "InflationInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "expect",
                      "type": 221,
                      "typeName": "Range<Balance>",
                      "docs": []
                    },
                    {
                      "name": "annual",
                      "type": 222,
                      "typeName": "Range<Perbill>",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "type": 222,
                      "typeName": "Range<Perbill>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "Range"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "min",
                      "type": 6,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "ideal",
                      "type": 6,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "max",
                      "type": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "Range"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "min",
                      "type": 37,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "ideal",
                      "type": 37,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "max",
                      "type": 37,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_staking_expectations",
                      "fields": [
                        {
                          "name": "expectations",
                          "type": 221,
                          "typeName": "Range<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the expectations for total staked. These expectations determine the issuance for",
                        "the round according to logic in `fn compute_issuance`"
                      ]
                    },
                    {
                      "name": "set_inflation",
                      "fields": [
                        {
                          "name": "schedule",
                          "type": 222,
                          "typeName": "Range<Perbill>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the annual inflation rate to derive per-round inflation"
                      ]
                    },
                    {
                      "name": "set_parachain_bond_account",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the account that will hold funds set aside for parachain bond"
                      ]
                    },
                    {
                      "name": "set_parachain_bond_reserve_percent",
                      "fields": [
                        {
                          "name": "new",
                          "type": 36,
                          "typeName": "Percent",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the percent of inflation set aside for parachain bond"
                      ]
                    },
                    {
                      "name": "set_total_selected",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the total number of collator candidates selected per round",
                        "- changes are not applied until the start of the next round"
                      ]
                    },
                    {
                      "name": "set_collator_commission",
                      "fields": [
                        {
                          "name": "new",
                          "type": 37,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the commission for all collators"
                      ]
                    },
                    {
                      "name": "set_blocks_per_round",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set blocks per round",
                        "- if called with `new` less than length of current round, will transition immediately",
                        "in the next block",
                        "- also updates per-round inflation config"
                      ]
                    },
                    {
                      "name": "join_candidates",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Join the set of collator candidates"
                      ]
                    },
                    {
                      "name": "schedule_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Request to leave the set of candidates. If successful, the account is immediately",
                        "removed from the candidate pool to prevent selection as a collator."
                      ]
                    },
                    {
                      "name": "execute_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate_delegation_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Execute leave candidates request"
                      ]
                    },
                    {
                      "name": "cancel_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel open request to leave candidates",
                        "- only callable by collator account",
                        "- result upon successful call is the candidate is active in the candidate pool"
                      ]
                    },
                    {
                      "name": "go_offline",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Temporarily leave the set of collator candidates without unbonding"
                      ]
                    },
                    {
                      "name": "go_online",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Rejoin the set of collator candidates if previously had called `go_offline`"
                      ]
                    },
                    {
                      "name": "candidate_bond_more",
                      "fields": [
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Increase collator candidate self bond by `more`"
                      ]
                    },
                    {
                      "name": "schedule_candidate_bond_less",
                      "fields": [
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Request by collator candidate to decrease self bond by `less`"
                      ]
                    },
                    {
                      "name": "execute_candidate_bond_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Execute pending request to adjust the collator candidate self bond"
                      ]
                    },
                    {
                      "name": "cancel_candidate_bond_less",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "Cancel pending request to adjust the collator candidate self bond"
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "candidate_delegation_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "delegation_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "If caller is not a delegator and not a collator, then join the set of delegators",
                        "If caller is a delegator, then makes delegation to change their delegation state"
                      ]
                    },
                    {
                      "name": "schedule_leave_delegators",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "Request to leave the set of delegators. If successful, the caller is scheduled to be",
                        "allowed to exit via a [DelegationAction::Revoke] towards all existing delegations.",
                        "Success forbids future delegation requests until the request is invoked or cancelled."
                      ]
                    },
                    {
                      "name": "execute_leave_delegators",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegation_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Execute the right to exit the set of delegators and revoke all ongoing delegations."
                      ]
                    },
                    {
                      "name": "cancel_leave_delegators",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "Cancel a pending request to exit the set of delegators. Success clears the pending exit",
                        "request (thereby resetting the delay upon another `leave_delegators` call)."
                      ]
                    },
                    {
                      "name": "schedule_revoke_delegation",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Request to revoke an existing delegation. If successful, the delegation is scheduled",
                        "to be allowed to be revoked via the `execute_delegation_request` extrinsic."
                      ]
                    },
                    {
                      "name": "delegator_bond_more",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Bond more for delegators wrt a specific collator candidate."
                      ]
                    },
                    {
                      "name": "schedule_delegator_bond_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Request bond less for delegators wrt a specific collator candidate."
                      ]
                    },
                    {
                      "name": "execute_delegation_request",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Execute pending request to change an existing delegation"
                      ]
                    },
                    {
                      "name": "cancel_delegation_request",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Cancel request to change an existing delegation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegatorDNE",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DelegatorDNEinTopNorBottom",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DelegatorDNEInDelegatorSet",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CandidateDNE",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "DelegationDNE",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "DelegatorExists",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "CandidateExists",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "CandidateBondBelowMin",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "DelegatorBondBelowMin",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "DelegationBelowMin",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "AlreadyOffline",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "AlreadyActive",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DelegatorAlreadyLeaving",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DelegatorNotLeaving",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "DelegatorCannotLeaveYet",
                      "fields": [],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "CannotDelegateIfLeaving",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "CandidateAlreadyLeaving",
                      "fields": [],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "CandidateNotLeaving",
                      "fields": [],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "CandidateCannotLeaveYet",
                      "fields": [],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "CannotGoOnlineIfLeaving",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "ExceedMaxDelegationsPerDelegator",
                      "fields": [],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "AlreadyDelegatedCandidate",
                      "fields": [],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "InvalidSchedule",
                      "fields": [],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "CannotSetBelowMin",
                      "fields": [],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "RoundLengthMustBeAtLeastTotalSelectedCollators",
                      "fields": [],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "NoWritingSameValue",
                      "fields": [],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "TooLowCandidateCountWeightHintJoinCandidates",
                      "fields": [],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
                      "fields": [],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "TooLowCandidateCountToLeaveCandidates",
                      "fields": [],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "TooLowDelegationCountToDelegate",
                      "fields": [],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "TooLowCandidateDelegationCountToDelegate",
                      "fields": [],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "TooLowCandidateDelegationCountToLeaveCandidates",
                      "fields": [],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "TooLowDelegationCountToLeaveDelegators",
                      "fields": [],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "PendingCandidateRequestsDNE",
                      "fields": [],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "PendingCandidateRequestAlreadyExists",
                      "fields": [],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "PendingCandidateRequestNotDueYet",
                      "fields": [],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "PendingDelegationRequestDNE",
                      "fields": [],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "PendingDelegationRequestAlreadyExists",
                      "fields": [],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "PendingDelegationRequestNotDueYet",
                      "fields": [],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "CannotDelegateLessThanOrEqualToLowestBottomWhenFull",
                      "fields": [],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "PendingDelegationRevoke",
                      "fields": [],
                      "index": 41,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "pallet_author_inherent",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "kick_off_authorship_validation",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "This inherent is a workaround to run code after the \"real\" inherents have executed,",
                        "but before transactions are executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "pallet_author_inherent",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuthorAlreadySet",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Author already set in block."
                      ]
                    },
                    {
                      "name": "NoAccountId",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No AccountId was found to be associated with this author"
                      ]
                    },
                    {
                      "name": "CannotBeAuthor",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The author in the inherent is not an eligible author."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "pallet_author_slot_filter",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_eligible",
                      "fields": [
                        {
                          "name": "new",
                          "type": 39,
                          "typeName": "EligibilityValue",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Update the eligible count. Intended to be called by governance."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "pallet_author_mapping",
                "pallet",
                "RegistrationInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "keys",
                      "type": 43,
                      "typeName": "T::Keys",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "pallet_author_mapping",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_association",
                      "fields": [
                        {
                          "name": "nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register your NimbusId onchain so blocks you author are associated with your account.",
                        "",
                        "Users who have been (or will soon be) elected active collators in staking,",
                        "should submit this extrinsic to have their blocks accepted and earn rewards."
                      ]
                    },
                    {
                      "name": "update_association",
                      "fields": [
                        {
                          "name": "old_nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        },
                        {
                          "name": "new_nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Change your Mapping.",
                        "",
                        "This is useful for normal key rotation or for when switching from one physical collator",
                        "machine to another. No new security deposit is required.",
                        "This sets keys to new_nimbus_id.into() by default."
                      ]
                    },
                    {
                      "name": "clear_association",
                      "fields": [
                        {
                          "name": "nimbus_id",
                          "type": 41,
                          "typeName": "NimbusId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Clear your Mapping.",
                        "",
                        "This is useful when you are no longer an author and would like to re-claim your security",
                        "deposit."
                      ]
                    },
                    {
                      "name": "remove_keys",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Remove your Mapping.",
                        "",
                        "This is useful when you are no longer an author and would like to re-claim your security",
                        "deposit."
                      ]
                    },
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set association and session keys at once.",
                        "",
                        "This is useful for key rotation to update Nimbus and VRF keys in one call.",
                        "No new security deposit is required. Will replace `update_association` which is kept",
                        "now for backwards compatibility reasons."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_author_mapping",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssociationNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The association can't be cleared because it is not found."
                      ]
                    },
                    {
                      "name": "NotYourAssociation",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The association can't be cleared because it belongs to another account."
                      ]
                    },
                    {
                      "name": "CannotAffordSecurityDeposit",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "This account cannot set an author because it cannon afford the security deposit"
                      ]
                    },
                    {
                      "name": "AlreadyAssociated",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The NimbusId in question is already associated and cannot be overwritten"
                      ]
                    },
                    {
                      "name": "OldAuthorIdNotFound",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "No existing NimbusId can be found for the account"
                      ]
                    },
                    {
                      "name": "WrongKeySize",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Keys have wrong size"
                      ]
                    },
                    {
                      "name": "DecodeNimbusFailed",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Failed to decode NimbusId for `set_keys`"
                      ]
                    },
                    {
                      "name": "DecodeKeysFailed",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Failed to decode T::Keys for `set_keys`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "An error that can occur while executing the mapping pallet's logic."
              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "pallet_moonbeam_orbiters",
                "types",
                "CollatorPoolInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "orbiters",
                      "type": 76,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_current_orbiter",
                      "type": 232,
                      "typeName": "Option<CurrentOrbiter<AccountId>>",
                      "docs": []
                    },
                    {
                      "name": "next_orbiter",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 233
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 233,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "pallet_moonbeam_orbiters",
                "types",
                "CurrentOrbiter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "removed",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_moonbeam_orbiters",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "collator_add_orbiter",
                      "fields": [
                        {
                          "name": "orbiter",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add an orbiter in a collator pool"
                      ]
                    },
                    {
                      "name": "collator_remove_orbiter",
                      "fields": [
                        {
                          "name": "orbiter",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove an orbiter from the caller collator pool"
                      ]
                    },
                    {
                      "name": "orbiter_leave_collator_pool",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove the caller from the specified collator pool"
                      ]
                    },
                    {
                      "name": "orbiter_register",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Registering as an orbiter"
                      ]
                    },
                    {
                      "name": "orbiter_unregister",
                      "fields": [
                        {
                          "name": "collators_pool_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Deregistering from orbiters"
                      ]
                    },
                    {
                      "name": "add_collator",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Add a collator to orbiters program."
                      ]
                    },
                    {
                      "name": "remove_collator",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Remove a collator from orbiters program."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_moonbeam_orbiters",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollatorAlreadyAdded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The collator is already added in orbiters program."
                      ]
                    },
                    {
                      "name": "CollatorNotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "This collator is not in orbiters program."
                      ]
                    },
                    {
                      "name": "CollatorPoolTooLarge",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "There are already too many orbiters associated with this collator."
                      ]
                    },
                    {
                      "name": "CollatorsPoolCountTooLow",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "There are more collator pools than the number specified in the parameter."
                      ]
                    },
                    {
                      "name": "MinOrbiterDepositNotSet",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The minimum deposit required to register as an orbiter has not yet been included in the",
                        "onchain storage"
                      ]
                    },
                    {
                      "name": "OrbiterAlreadyInPool",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "This orbiter is already associated with this collator."
                      ]
                    },
                    {
                      "name": "OrbiterDepositNotFound",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "This orbiter has not made a deposit"
                      ]
                    },
                    {
                      "name": "OrbiterNotFound",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "This orbiter is not found"
                      ]
                    },
                    {
                      "name": "OrbiterStillInAPool",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The orbiter is still at least in one pool"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "An error that can occur while executing this pallet's extrinsics."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 237,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 238,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 237,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 355,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 238,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 238
                }
              },
              "docs": []
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "moonriver_runtime",
                "Call"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 140,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 172,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 183,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 192,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 223,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "AuthorInherent",
                      "fields": [
                        {
                          "name": null,
                          "type": 225,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorInherent, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "AuthorFilter",
                      "fields": [
                        {
                          "name": null,
                          "type": 227,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorFilter, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "AuthorMapping",
                      "fields": [
                        {
                          "name": null,
                          "type": 229,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorMapping, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "MoonbeamOrbiters",
                      "fields": [
                        {
                          "name": null,
                          "type": 234,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MoonbeamOrbiters, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 236,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 239,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "MaintenanceMode",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MaintenanceMode, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 242,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 282,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 287,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 297,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 298,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 301,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "CouncilCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 304,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilCollective, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "TechCommitteeCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 305,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechCommitteeCollective, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 306,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "CrowdloanRewards",
                      "fields": [
                        {
                          "name": null,
                          "type": 307,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CrowdloanRewards, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 318,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 319,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 344,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "AssetManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 346,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetManager, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "XcmTransactor",
                      "fields": [
                        {
                          "name": null,
                          "type": 352,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmTransactor, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "LocalAssets",
                      "fields": [
                        {
                          "name": null,
                          "type": 354,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LocalAssets, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 240,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 238,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 50,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "height",
                          "type": 96,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "ext_index",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 240,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 238,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 50
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_maintenance_mode",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enter_maintenance_mode",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Place the chain in maintenance mode",
                        "",
                        "Weight cost is:",
                        "* One DB read to ensure we're not already in maintenance mode",
                        "* Three DB writes - 1 for the mode, 1 for suspending xcm execution, 1 for the event"
                      ]
                    },
                    {
                      "name": "resume_normal_operation",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Return the chain to normal operating mode",
                        "",
                        "Weight cost is:",
                        "* One DB read to ensure we're in maintenance mode",
                        "* Three DB writes - 1 for the mode, 1 for resuming xcm execution, 1 for the event"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 243,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 277,
                          "typeName": "Vec<(T::AccountId, Data)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 96,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "max_fee",
                          "type": 99,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 99,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "fields",
                          "type": 279,
                          "typeName": "IdentityFields",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 96,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "judgement",
                          "type": 281,
                          "typeName": "Judgement<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 246,
                          "typeName": "Data",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 246,
                          "typeName": "Data",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 244,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                      "docs": []
                    },
                    {
                      "name": "display",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "legal",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "web",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "riot",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "email",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 276,
                      "typeName": "Option<[u8; 20]>",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "twitter",
                      "type": 246,
                      "typeName": "Data",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 245
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 275,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 245,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  246,
                  246
                ]
              },
              "docs": []
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 247,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 248,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 249,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 250,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 15,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 251,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 252,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 254,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 255,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 256,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 257,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 258,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 259,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 260,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 111,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 261,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 262,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 263,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 264,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 265,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 266,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 267,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 268,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 269,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 271,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 272,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 273,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 274,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 247,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 248,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 249,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 250,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 251,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 252,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 253,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 254,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 255,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 256,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 257,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 258,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 259,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 260,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 261,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 262,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 263,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 264,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 265,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 266,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 267,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 268,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 269,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 270,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 271,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 272,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 273,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 274,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 275,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 245
                }
              },
              "docs": []
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 277,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 278
                }
              },
              "docs": []
            }
          },
          {
            "id": 278,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  246
                ]
              },
              "docs": []
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 280
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "IdentityField",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Legal",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Web",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Riot",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Email",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "PgpFingerprint",
                      "fields": [],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Image",
                      "fields": [],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Twitter",
                      "fields": [],
                      "index": 128,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Reasonable",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "KnownGood",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "OutOfDate",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "LowQuality",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Erroneous",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 284,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 284,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "salt",
                          "type": 9,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 283,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 284,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    },
                    {
                      "name": "hotfix_inc_account_sufficients",
                      "fields": [
                        {
                          "name": "addresses",
                          "type": 286,
                          "typeName": "Vec<H160>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Increment `sufficients` for existing accounts having a nonzero `nonce` but zero `sufficients` value."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 59
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 59,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 284,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 285
                }
              },
              "docs": []
            }
          },
          {
            "id": 285,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  57,
                  58
                ]
              },
              "docs": []
            }
          },
          {
            "id": 286,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 57
                }
              },
              "docs": []
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 288,
                          "typeName": "Transaction",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 289,
                          "typeName": "LegacyTransaction",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 293,
                          "typeName": "EIP2930Transaction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 296,
                          "typeName": "EIP1559Transaction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 290,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 291,
                      "typeName": "TransactionSignature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Create",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 292,
                      "typeName": "TransactionRecoveryId",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 290,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": 294,
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 294,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 295
                }
              },
              "docs": []
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 57,
                      "typeName": "Address",
                      "docs": []
                    },
                    {
                      "name": "storage_keys",
                      "type": 58,
                      "typeName": "Vec<H256>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 290,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": 294,
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 59,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "set_is_active",
                      "fields": [
                        {
                          "name": "is_active",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 70,
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 299,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 300,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 299,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 300,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 299,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 300,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 299,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 300,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 72
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 238
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "name": null,
                          "type": 238,
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 96,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 96,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 78,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "  `FastTrackVotingPeriod` if too low.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 96,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 302,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 303,
                          "typeName": "Option<ReferendumIndex>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 96,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Locked1x",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Locked2x",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Locked3x",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Locked4x",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Locked5x",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Locked6x",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 76,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 238,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 96,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 238,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 98,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 76,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 45,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 238,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 96,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 238,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 98,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 96,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "pallet_crowdloan_rewards",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "associate_native_identity",
                      "fields": [
                        {
                          "name": "reward_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "relay_account",
                          "type": 10,
                          "typeName": "T::RelayChainAccountId",
                          "docs": []
                        },
                        {
                          "name": "proof",
                          "type": 308,
                          "typeName": "MultiSignature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Associate a native rewards_destination identity with a crowdloan contribution.",
                        "",
                        "The caller needs to provide the unassociated relay account and a proof to succeed",
                        "with the association",
                        "The proof is nothing but a signature over the reward_address using the relay keys"
                      ]
                    },
                    {
                      "name": "change_association_with_relay_keys",
                      "fields": [
                        {
                          "name": "reward_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "previous_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proofs",
                          "type": 314,
                          "typeName": "Vec<(T::RelayChainAccountId, MultiSignature)>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Change reward account by submitting proofs from relay accounts",
                        "",
                        "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'",
                        "The account to be changed needs to be submitted as 'previous_account'",
                        "Origin must be RewardAddressChangeOrigin"
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Collect whatever portion of your reward are currently vested."
                      ]
                    },
                    {
                      "name": "update_reward_address",
                      "fields": [
                        {
                          "name": "new_reward_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Update reward address, proving that the caller owns the current native key"
                      ]
                    },
                    {
                      "name": "complete_initialization",
                      "fields": [
                        {
                          "name": "lease_ending_block",
                          "type": 4,
                          "typeName": "T::VestingBlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "This extrinsic completes the initialization if some checks are fullfiled. These checks are:",
                        " -The reward contribution money matches the crowdloan pot",
                        " -The end vesting block is higher than the init vesting block",
                        " -The initialization has not complete yet"
                      ]
                    },
                    {
                      "name": "initialize_reward_vec",
                      "fields": [
                        {
                          "name": "rewards",
                          "type": 316,
                          "typeName": "Vec<(T::RelayChainAccountId, Option<T::AccountId>, BalanceOf<T>)>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Initialize the reward distribution storage. It shortcuts whenever an error is found",
                        "This does not enforce any checks other than making sure we dont go over funds",
                        "complete_initialization should perform any additional"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 309,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 311,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 312,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 310,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 310,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 310,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 313,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 313,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 314,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 315
                }
              },
              "docs": []
            }
          },
          {
            "id": 315,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  10,
                  308
                ]
              },
              "docs": []
            }
          },
          {
            "id": 316,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 317
                }
              },
              "docs": []
            }
          },
          {
            "id": 317,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  10,
                  45,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `Unknown`: Message of `index` is unknown.",
                        "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 320,
                          "typeName": "Box<VersionedXcm<()>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 331,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 93,
                          "typeName": "Box<MultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 303,
                          "typeName": "Option<XcmVersion>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 321,
                          "typeName": "v0::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 326,
                          "typeName": "v1::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 102,
                          "typeName": "v2::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 325,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 116,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 321,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 322,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 323
                }
              },
              "docs": []
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 124,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 324,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 324,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 321
                }
              },
              "docs": []
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Response"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 330,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 116,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 94,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 326,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 327,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 328
                }
              },
              "docs": []
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 107,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "instructions",
                          "type": 329,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 329,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 326
                }
              },
              "docs": []
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Response"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 332,
                          "typeName": "v0::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 337,
                          "typeName": "v1::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "v2::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 325,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 332,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 333,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 334
                }
              },
              "docs": []
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 125,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 124,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 335,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 335,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 332
                }
              },
              "docs": []
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 11,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 330,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 94,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 337,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 338,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 339
                }
              },
              "docs": []
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 107,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "instructions",
                          "type": 340,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 340,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 337
                }
              },
              "docs": []
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 342,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 342,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 343
                }
              },
              "docs": []
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 112,
                          "typeName": "Response",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 96,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 102,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 107,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "ClearError",
                      "fields": [],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 105,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "ticket",
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 98,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 98,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 27,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": 345,
                          "typeName": "DestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                        "owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "asset.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                        "can provide accurate witness information and prevent users from manipulating state",
                        "in a way that can make it harder to destroy.",
                        "",
                        "Weight: `O(c + p + a)` where:",
                        "- `c = (witness.accounts - witness.sufficients)`",
                        "- `s = witness.sufficients`",
                        "- `a = witness.approvals`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "allow_burn",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "DestroyWitness"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "accounts",
                      "type": 96,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 96,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 96,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "pallet_asset_manager",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_foreign_asset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 131,
                          "typeName": "T::AssetRegistrarMetadata",
                          "docs": []
                        },
                        {
                          "name": "min_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register new asset with the asset manager"
                      ]
                    },
                    {
                      "name": "set_asset_units_per_second",
                      "fields": [
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "units_per_second",
                          "type": 6,
                          "typeName": "u128",
                          "docs": []
                        },
                        {
                          "name": "num_assets_weight_hint",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Change the amount of units we are charging per execution second",
                        "for a given ForeignAssetType"
                      ]
                    },
                    {
                      "name": "change_existing_asset_type",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "new_asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "num_assets_weight_hint",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Change the xcm type mapping for a given assetId",
                        "We also change this if the previous units per second where pointing at the old",
                        "assetType"
                      ]
                    },
                    {
                      "name": "remove_supported_asset",
                      "fields": [
                        {
                          "name": "asset_type",
                          "type": 130,
                          "typeName": "T::ForeignAssetType",
                          "docs": []
                        },
                        {
                          "name": "num_assets_weight_hint",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "remove_existing_asset_type",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "num_assets_weight_hint",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a given assetId -> assetType association"
                      ]
                    },
                    {
                      "name": "register_local_asset",
                      "fields": [
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Register a new local asset",
                        "No information is stored in this pallet about the local asset",
                        "The reason is that we dont need to hold a mapping between the multilocation",
                        "and the local asset, as this conversion is deterministic",
                        "Further, we dont allow xcm fee payment in local assets"
                      ]
                    },
                    {
                      "name": "destroy_foreign_asset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "destroy_asset_witness",
                          "type": 345,
                          "typeName": "T::AssetDestroyWitness",
                          "docs": []
                        },
                        {
                          "name": "num_assets_weight_hint",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Destroy a given foreign assetId",
                        "The weight in this case is the one returned by the trait",
                        "plus the db writes and reads from removing all the associated",
                        "data"
                      ]
                    },
                    {
                      "name": "destroy_local_asset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "destroy_asset_witness",
                          "type": 345,
                          "typeName": "T::AssetDestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Destroy a given local assetId",
                        "We do not store anything related to local assets in this pallet other than the counter",
                        "and the counter is not used for destroying the asset, so no additional db reads/writes",
                        "to be counter here"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 348,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 349,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 348,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 349,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 349,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 350,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>",
                          "docs": []
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "moonriver_runtime",
                "xcm_config",
                "CurrencyId"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SelfReserve",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ForeignAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "AssetId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "LocalAssetReserve",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "AssetId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAsset"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 124,
                          "typeName": "v0::MultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "v1::MultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 350,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 351
                }
              },
              "docs": []
            }
          },
          {
            "id": 351,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  348,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "xcm_transactor",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a derivative index for an account id. Dispatchable by",
                        "DerivativeAddressRegistrationOrigin",
                        "",
                        "We do not store the derivative address, but only the index. We do not need to store",
                        "the derivative address to issue calls, only the index is enough",
                        "",
                        "For now an index is registered for all possible destinations and not per-destination.",
                        "We can change this in the future although it would just make things more complicated"
                      ]
                    },
                    {
                      "name": "deregister",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "De-Register a derivative index. This prevents an account to use a derivative address",
                        "(represented by an index) from our of our sovereign accounts anymore"
                      ]
                    },
                    {
                      "name": "transact_through_derivative_multilocation",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 353,
                          "typeName": "T::Transactor",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "fee_location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "inner_call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transact the inner call through a derivative account in a destination chain,",
                        "using 'fee_location' to pay for the fees. This fee_location is given as a multilocation",
                        "",
                        "The caller needs to have the index registered in this pallet. The fee multiasset needs",
                        "to be a reserve asset for the destination transactor::multilocation."
                      ]
                    },
                    {
                      "name": "transact_through_derivative",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 353,
                          "typeName": "T::Transactor",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 348,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "inner_call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transact the inner call through a derivative account in a destination chain,",
                        "using 'currency_id' to pay for the fees.",
                        "",
                        "The caller needs to have the index registered in this pallet. The fee multiasset needs",
                        "to be a reserve asset for the destination transactor::multilocation."
                      ]
                    },
                    {
                      "name": "transact_through_sovereign",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "fee_payer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "fee_location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "origin_kind",
                          "type": 115,
                          "typeName": "OriginKind",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transact the call through the sovereign account in a destination chain,",
                        "'fee_payer' pays for the fee",
                        "",
                        "SovereignAccountDispatcherOrigin callable only"
                      ]
                    },
                    {
                      "name": "set_transact_info",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "transact_extra_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "transact_extra_weight_signed",
                          "type": 135,
                          "typeName": "Option<Weight>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Change the transact info of a location"
                      ]
                    },
                    {
                      "name": "remove_transact_info",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Remove the transact info of a location"
                      ]
                    },
                    {
                      "name": "transact_through_signed",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "fee_currency_id",
                          "type": 348,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Transact the call through the a signed origin in this chain",
                        "that should be converted to a transaction dispatch account in the destination chain",
                        "by any method implemented in the destination chains runtime",
                        "",
                        "This time we are giving the currency as a currencyId instead of multilocation"
                      ]
                    },
                    {
                      "name": "transact_through_signed_multilocation",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "fee_location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transact the call through the a signed origin in this chain",
                        "that should be converted to a transaction dispatch account in the destination chain",
                        "by any method implemented in the destination chains runtime",
                        "",
                        "This time we are giving the currency as a multilocation instead of currencyId"
                      ]
                    },
                    {
                      "name": "set_fee_per_second",
                      "fields": [
                        {
                          "name": "asset_location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "fee_per_second",
                          "type": 6,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Set the fee per second of an asset on its reserve chain"
                      ]
                    },
                    {
                      "name": "remove_fee_per_second",
                      "fields": [
                        {
                          "name": "asset_location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove the fee per second of an asset on its reserve chain"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "moonriver_runtime",
                "xcm_config",
                "Transactors"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": 345,
                          "typeName": "DestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                        "owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "asset.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                        "can provide accurate witness information and prevent users from manipulating state",
                        "in a way that can make it harder to destroy.",
                        "",
                        "Weight: `O(c + p + a)` where:",
                        "- `c = (witness.accounts - witness.sufficients)`",
                        "- `s = witness.sufficients`",
                        "- `a = witness.approvals`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "allow_burn",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "moonriver_runtime",
                "OriginCaller"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 356,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 357,
                          "typeName": "pallet_ethereum::Origin",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "CouncilCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 358,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "TechCommitteeCollective",
                      "fields": [
                        {
                          "name": null,
                          "type": 359,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 360,
                          "typeName": "cumulus_pallet_xcm::Origin",
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 361,
                          "typeName": "pallet_xcm::Origin",
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 362,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "ParaId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  365,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 366
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 367,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 50
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 50,
                      "typeName": "ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 367,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 366
                }
              },
              "docs": []
            }
          },
          {
            "id": 368,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  369,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 370
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 371,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 371,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 370
                }
              },
              "docs": []
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_maintenance_mode",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyInMaintenanceMode",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The chain cannot enter maintenance mode because it is already in maintenance mode"
                      ]
                    },
                    {
                      "name": "NotInMaintenanceMode",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The chain cannot resume normal operation because it is not in maintenance mode"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "An error that can occur while executing this pallet's extrinsics."
              ]
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 375,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "info",
                      "type": 243,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 376
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 377,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 376,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  281
                ]
              },
              "docs": []
            }
          },
          {
            "id": 377,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 376
                }
              },
              "docs": []
            }
          },
          {
            "id": 378,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  379
                ]
              },
              "docs": []
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 76,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 381
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 383,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 382
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 382,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "type": 279,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 383,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 381
                }
              },
              "docs": []
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  57,
                  9
                ]
              },
              "docs": []
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "MaxAddressCountExceeded",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Maximum address count exceeded"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 388
                }
              },
              "docs": []
            }
          },
          {
            "id": 388,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  288,
                  389,
                  394
                ]
              },
              "docs": []
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": 57,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 390,
                      "typeName": "Option<H160>",
                      "docs": []
                    },
                    {
                      "name": "contract_address",
                      "type": 390,
                      "typeName": "Option<H160>",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": 391,
                      "typeName": "Vec<Log>",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 392,
                      "typeName": "Bloom",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 57
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 391,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 56
                }
              },
              "docs": []
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 393,
                      "typeName": "[u8; BLOOM_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 393,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 395,
                          "typeName": "EIP658ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 395,
                          "typeName": "EIP2930ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 395,
                          "typeName": "EIP1559ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "used_gas",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 392,
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": 391,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 288
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 397,
                      "typeName": "Header",
                      "docs": []
                    },
                    {
                      "name": "transactions",
                      "type": 399,
                      "typeName": "Vec<T>",
                      "docs": []
                    },
                    {
                      "name": "ommers",
                      "type": 400,
                      "typeName": "Vec<Header>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "ommers_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 57,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transactions_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "receipts_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 392,
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "difficulty",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_used",
                      "type": 59,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "extra_data",
                      "type": 11,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "mix_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 398,
                      "typeName": "H64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 89,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 399,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 288
                }
              },
              "docs": []
            }
          },
          {
            "id": 400,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 397
                }
              },
              "docs": []
            }
          },
          {
            "id": 401,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 394
                }
              },
              "docs": []
            }
          },
          {
            "id": 402,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 389
                }
              },
              "docs": []
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 404,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 405
                }
              },
              "docs": []
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 406
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 406,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 300
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 355
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 73,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 300,
                      "typeName": "Call",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 299,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 355,
                      "typeName": "PalletsOrigin",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 409
                }
              },
              "docs": []
            }
          },
          {
            "id": 409,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  9,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 410,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  76,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "expiry",
                          "type": 303,
                          "typeName": "Option<BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "name": null,
                          "type": 413,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 77,
                      "typeName": "VoteThreshold",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "tally",
                      "type": 414,
                      "typeName": "Tally<Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 416,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 418,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 419,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 302,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 418,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 419,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 416,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 417
                }
              },
              "docs": []
            }
          },
          {
            "id": 417,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  78
                ]
              },
              "docs": []
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 420,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  9,
                  77
                ]
              },
              "docs": []
            }
          },
          {
            "id": 421,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  76
                ]
              },
              "docs": []
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 58,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "ayes",
                      "type": 76,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 76,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 430,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 430,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 89,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "pallet_crowdloan_rewards",
                "pallet",
                "RewardInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_reward",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "claimed_reward",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "contributed_relay_addresses",
                      "type": 435,
                      "typeName": "Vec<T::RelayChainAccountId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 435,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": []
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "pallet_crowdloan_rewards",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyAssociated",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "User trying to associate a native identity with a relay chain identity for posterior",
                        "reward claiming provided an already associated relay chain identity"
                      ]
                    },
                    {
                      "name": "BatchBeyondFundPot",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Trying to introduce a batch that goes beyond the limits of the funds"
                      ]
                    },
                    {
                      "name": "FirstClaimAlreadyDone",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "First claim already done"
                      ]
                    },
                    {
                      "name": "RewardNotHighEnough",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The contribution is not high enough to be eligible for rewards"
                      ]
                    },
                    {
                      "name": "InvalidClaimSignature",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "User trying to associate a native identity with a relay chain identity for posterior",
                        "reward claiming provided a wrong signature"
                      ]
                    },
                    {
                      "name": "InvalidFreeClaimSignature",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "User trying to claim the first free reward provided the wrong signature"
                      ]
                    },
                    {
                      "name": "NoAssociatedClaim",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "User trying to claim an award did not have an claim associated with it. This may mean",
                        "they did not contribute to the crowdloan, or they have not yet associated a native id",
                        "with their contribution"
                      ]
                    },
                    {
                      "name": "RewardsAlreadyClaimed",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "User trying to claim rewards has already claimed all rewards associated with its",
                        "identity and contribution"
                      ]
                    },
                    {
                      "name": "RewardVecAlreadyInitialized",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Reward vec has already been initialized"
                      ]
                    },
                    {
                      "name": "RewardVecNotFullyInitializedYet",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Reward vec has not yet been fully initialized"
                      ]
                    },
                    {
                      "name": "RewardsDoNotMatchFund",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Rewards should match funds of the pallet"
                      ]
                    },
                    {
                      "name": "TooManyContributors",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Initialize_reward_vec received too many contributors"
                      ]
                    },
                    {
                      "name": "VestingPeriodNonValid",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Provided vesting period is not valid"
                      ]
                    },
                    {
                      "name": "NonContributedAddressProvided",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "User provided a signature from a non-contributor relay account"
                      ]
                    },
                    {
                      "name": "InsufficientNumberOfValidProofs",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "User submitted an unsifficient number of proofs to change the reward address"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 438
                }
              },
              "docs": []
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundChannelDetails"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 87,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 439,
                      "typeName": "InboundState",
                      "docs": []
                    },
                    {
                      "name": "message_metadata",
                      "type": 440,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundState"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Suspended",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 440,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 441
                }
              },
              "docs": []
            }
          },
          {
            "id": 441,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  442
                ]
              },
              "docs": []
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "XcmpMessageFormat"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Signals",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 443,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 444,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 445
                }
              },
              "docs": []
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 87,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 446,
                      "typeName": "OutboundState",
                      "docs": []
                    },
                    {
                      "name": "signals_exist",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "first_index",
                      "type": 51,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "last_index",
                      "type": 51,
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Suspended",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 447,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  51
                ]
              },
              "docs": []
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 449,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  87,
                  4,
                  11
                ]
              },
              "docs": []
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Failed to send XCM message."
                      ]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Bad XCM origin."
                      ]
                    },
                    {
                      "name": "BadXcm",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Bad XCM data."
                      ]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Bad overweight index."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "ConfigData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "PageIndexData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": []
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": []
                    },
                    {
                      "name": "overweight_count",
                      "type": 8,
                      "typeName": "OverweightIndex",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 454,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 455
                }
              },
              "docs": []
            }
          },
          {
            "id": 455,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  11
                ]
              },
              "docs": []
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "OverLimit",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 127,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "maybe_notify",
                          "type": 458,
                          "typeName": "Option<(u8, u8)>",
                          "docs": []
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 127,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "is_active",
                          "type": 32,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 460,
                          "typeName": "VersionedResponse",
                          "docs": []
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 459
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 459,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 459,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  2,
                  2
                ]
              },
              "docs": []
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 325,
                          "typeName": "v0::Response",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 330,
                          "typeName": "v1::Response",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "v2::Response",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 461,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  127
                ]
              },
              "docs": []
            }
          },
          {
            "id": 462,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  8,
                  8,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 464
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 465,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 464,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  127,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 465,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 464
                }
              },
              "docs": []
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "accounts",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 469,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "Extra",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "reason",
                      "type": 471,
                      "typeName": "ExistenceReason<DepositBalance>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "type": 48,
                      "typeName": "Extra",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sufficient",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "DepositRefunded",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 472,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  0,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 475
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 475,
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "type": 475,
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 32,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 11,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "pallet_asset_manager",
                "pallet",
                "AssetInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "creator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 478,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 130
                }
              },
              "docs": []
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "pallet_asset_manager",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ErrorCreatingAsset",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AssetAlreadyExists",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AssetDoesNotExist",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "TooLowNumAssetsWeightHint",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "LocalAssetLimitReached",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "ErrorDestroyingAsset",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "NotSufficientDeposit",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "NonExistentLocalAsset",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "An error that can occur while executing the mapping pallet's logic."
              ]
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Asset has no reserve location."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Not cross-chain transfer."
                      ]
                    },
                    {
                      "name": "InvalidDest",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Invalid transfer destination."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Currency is not cross-chain transferable."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the",
                        "destination chain."
                      ]
                    },
                    {
                      "name": "InvalidAncestry",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Could not get ancestry of asset reserve location."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The MultiAsset is invalid."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "We tried sending distinct asset and fee but they have different",
                        "reserve chains."
                      ]
                    },
                    {
                      "name": "ZeroFee",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The fee is zero."
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The transfering asset amount is zero."
                      ]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The number of assets to be sent is over the maximum."
                      ]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The specified index does not exist in a MultiAssets struct."
                      ]
                    },
                    {
                      "name": "FeeNotEnough",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "Fee is not enough."
                      ]
                    },
                    {
                      "name": "NotSupportedMultiLocation",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "Not supported MultiLocation"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "xcm_transactor",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAlreadyClaimed",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "UnclaimedIndex",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "AssetHasNoReserve",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "InvalidDest",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AssetIsNotReserveInDestination",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ErrorSending",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "DispatchWeightBiggerThanTotalWeight",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "WeightOverflow",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "AmountOverflow",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "TransactorInfoNotSet",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "fields": [],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "XcmExecuteError",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "MaxWeightTransactReached",
                      "fields": [],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "UnableToWithdrawAsset",
                      "fields": [],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "FeePerSecondNotSet",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "SignedTransactNotAllowedForDestination",
                      "fields": [],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "FailedMultiLocationToJunction",
                      "fields": [],
                      "index": 22,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "An error that can occur while executing the mapping pallet's logic."
              ]
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 238
                },
                {
                  "name": "Signature",
                  "type": 484
                },
                {
                  "name": "Extra",
                  "type": 485
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 494,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "account",
                "EthereumSignature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 312,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 485,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  486,
                  487,
                  488,
                  489,
                  491,
                  492,
                  493
                ]
              },
              "docs": []
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 489,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 490,
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 134,
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 135,
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 138,
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 139,
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 143,
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 144,
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 145,
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 146,
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 147,
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 148,
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 149,
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 153,
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 154,
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 155,
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 156,
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 157,
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 158,
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 159,
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 161,
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 162,
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 163,
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 164,
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 165,
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 166,
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 167,
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 177,
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 178,
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 179,
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 181,
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 183,
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 184,
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 185,
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 186,
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 187,
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 188,
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 189,
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 193,
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 194,
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 196,
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 197,
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 198,
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 199,
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 202,
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 203,
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 204,
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 205,
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 206,
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 207,
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 208,
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 209,
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 211,
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 212,
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 213,
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 214,
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 215,
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 216,
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 217,
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 218,
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 219,
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 220,
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 221,
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 222,
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 223,
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 224,
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 225,
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 226,
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 227,
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 228,
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 229,
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 230,
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 231,
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 232,
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 233,
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 234,
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 235,
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 236,
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 237,
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 238,
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 239,
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 240,
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 241,
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 242,
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 243,
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 244,
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 245,
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 246,
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 247,
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 248,
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 249,
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 250,
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 251,
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 252,
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 253,
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 254,
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 96,
                      "typeName": "T::Index",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 99,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 494,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 238
                },
                {
                  "name": "Signature",
                  "type": 484
                },
                {
                  "name": "Extra",
                  "type": 485
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 11,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "moonriver_runtime",
                "Runtime"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 12
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 16
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 138
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 139
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 137
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 140
          },
          "events": {
            "type": 19
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 144,
              "value": "0x00f2052a010000000088526a74000000405973070000000001c0180fa44b0000000100e6bd4f57000000010000000000000000405973070000000001c0baa3be68000000010088526a740000000100a2941a1d0000004059730700000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 147,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x00010000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 149,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 150,
              "value": "0x246d6f6f6e7269766572246d6f6f6e72697665720300000045060000000000003cd2bc9897eed08f1503000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f01000000bd78255d4feeea1f04000000a33d43f58731ad8402000000582211f65bb14b8904000000e65b00e46cedd0aa0200000037c8bb1350a9a2a8010000002aa62120049dd2d2010000001fba3ffbb7e07e8d02000000ea93e3f16f3d6962020000000200000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 51,
              "value": "0x0505",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 154
          },
          "index": 0
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "items": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "type": {
                  "plain": 155
                },
                "fallback": "0x00",
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "type": {
                  "plain": 157
                },
                "fallback": "0x00",
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "type": {
                  "plain": 159
                },
                "fallback": "0x00",
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "type": {
                  "plain": 161
                },
                "fallback": "0x00",
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "type": {
                  "plain": 165
                },
                "fallback": "0x00",
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "type": {
                  "plain": 166
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "type": {
                  "plain": 167
                },
                "fallback": "0x00",
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "type": {
                  "plain": 170
                },
                "fallback": "0x00",
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 143
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 143
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "type": 172
          },
          "events": {
            "type": 28
          },
          "constants": [],
          "errors": {
            "type": 181
          },
          "index": 1
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": 182
                },
                "fallback": "0x00",
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 183
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0x0100000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "items": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "type": {
                  "plain": 87
                },
                "fallback": "0x64000000",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 191
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 192
          },
          "events": {
            "type": 29
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 193
          },
          "index": 10
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 194
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 195
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "type": 196,
              "value": "0x0401000000000000000000000000000000000000000001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            },
            {
              "name": "LengthToFee",
              "type": 196,
              "value": "0x0400a0724e180900000000000000000000000000000001",
              "docs": [
                " The polynomial that is applied in order to derive fee from length."
              ]
            }
          ],
          "errors": null,
          "index": 11
        },
        {
          "name": "ParachainStaking",
          "storage": {
            "prefix": "ParachainStaking",
            "items": [
              {
                "name": "CollatorCommission",
                "modifier": "Default",
                "type": {
                  "plain": 37
                },
                "fallback": "0x00000000",
                "docs": [
                  " Commission percent taken off of rewards for all collators"
                ]
              },
              {
                "name": "TotalSelected",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total candidates selected every round"
                ]
              },
              {
                "name": "ParachainBondInfo",
                "modifier": "Default",
                "type": {
                  "plain": 198
                },
                "fallback": "0x000000000000000000000000000000000000000000",
                "docs": [
                  " Parachain bond config info { account, percent_of_inflation }"
                ]
              },
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "plain": 199
                },
                "fallback": "0x010000000100000014000000",
                "docs": [
                  " Current round index and next round scheduled transition"
                ]
              },
              {
                "name": "NominatorState2",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 200
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DEPRECATED in favor of DelegatorState",
                  " Get nominator state associated with an account if account is nominating else None"
                ]
              },
              {
                "name": "DelegatorState",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 206
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Get delegator state associated with an account if account is delegating else None"
                ]
              },
              {
                "name": "CandidateState",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 207
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DEPRECATED",
                  " Get collator candidate state associated with an account if account is a candidate else None"
                ]
              },
              {
                "name": "CandidateInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 211
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Get collator candidate info associated with an account if account is candidate else None"
                ]
              },
              {
                "name": "DelegationScheduledRequests",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 213
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores outstanding delegation requests per collator."
                ]
              },
              {
                "name": "TopDelegations",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 215
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Top delegations for collator candidate"
                ]
              },
              {
                "name": "BottomDelegations",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 215
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Bottom delegations for collator candidate"
                ]
              },
              {
                "name": "CollatorState2",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 216
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DEPRECATED in favor of CandidateState",
                  " Get collator state associated with an account if account is collating else None"
                ]
              },
              {
                "name": "SelectedCandidates",
                "modifier": "Default",
                "type": {
                  "plain": 76
                },
                "fallback": "0x00",
                "docs": [
                  " The collator candidates selected for the current round"
                ]
              },
              {
                "name": "Total",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total capital locked by this staking pallet"
                ]
              },
              {
                "name": "CandidatePool",
                "modifier": "Default",
                "type": {
                  "plain": 201
                },
                "fallback": "0x00",
                "docs": [
                  " The pool of collator candidates, each with their total backing stake"
                ]
              },
              {
                "name": "AtStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 217,
                    "value": 218
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Snapshot of collator delegation stake at the start of the round"
                ]
              },
              {
                "name": "DelayedPayouts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 219
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Delayed payouts"
                ]
              },
              {
                "name": "Staked",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total counted stake for selected candidates in the round"
                ]
              },
              {
                "name": "InflationConfig",
                "modifier": "Default",
                "type": {
                  "plain": 220
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Inflation configuration"
                ]
              },
              {
                "name": "Points",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " Total points awarded to collators for block production in the round"
                ]
              },
              {
                "name": "AwardedPts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 217,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " Points for each collator per round"
                ]
              }
            ]
          },
          "calls": {
            "type": 223
          },
          "events": {
            "type": 31
          },
          "constants": [
            {
              "name": "MinBlocksPerRound",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " Minimum number of blocks per round"
              ]
            },
            {
              "name": "DefaultBlocksPerRound",
              "type": 4,
              "value": "0x58020000",
              "docs": [
                " Default number of blocks per round at genesis"
              ]
            },
            {
              "name": "LeaveCandidatesDelay",
              "type": 4,
              "value": "0x18000000",
              "docs": [
                " Number of rounds that candidates remain bonded before exit request is executable"
              ]
            },
            {
              "name": "CandidateBondLessDelay",
              "type": 4,
              "value": "0x18000000",
              "docs": [
                " Number of rounds candidate requests to decrease self-bond must wait to be executable"
              ]
            },
            {
              "name": "LeaveDelegatorsDelay",
              "type": 4,
              "value": "0x18000000",
              "docs": [
                " Number of rounds that delegators remain bonded before exit request is executable"
              ]
            },
            {
              "name": "RevokeDelegationDelay",
              "type": 4,
              "value": "0x18000000",
              "docs": [
                " Number of rounds that delegations remain bonded before revocation request is executable"
              ]
            },
            {
              "name": "DelegationBondLessDelay",
              "type": 4,
              "value": "0x18000000",
              "docs": [
                " Number of rounds that delegation less requests must wait before executable"
              ]
            },
            {
              "name": "RewardPaymentDelay",
              "type": 4,
              "value": "0x02000000",
              "docs": [
                " Number of rounds after which block authors are rewarded"
              ]
            },
            {
              "name": "MinSelectedCandidates",
              "type": 4,
              "value": "0x08000000",
              "docs": [
                " Minimum number of selected candidates every round"
              ]
            },
            {
              "name": "MaxTopDelegationsPerCandidate",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " Maximum top delegations counted per candidate"
              ]
            },
            {
              "name": "MaxBottomDelegationsPerCandidate",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " Maximum bottom delegations (not counted) per candidate"
              ]
            },
            {
              "name": "MaxDelegationsPerDelegator",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum delegations per delegator"
              ]
            },
            {
              "name": "DefaultCollatorCommission",
              "type": 37,
              "value": "0x00c2eb0b",
              "docs": [
                " Default commission due to collators, is `CollatorCommission` storage value in genesis"
              ]
            },
            {
              "name": "DefaultParachainBondReservePercent",
              "type": 36,
              "value": "0x1e",
              "docs": [
                " Default percent of inflation set aside for parachain bond account"
              ]
            },
            {
              "name": "MinCollatorStk",
              "type": 6,
              "value": "0x0000a0dec5adc9353600000000000000",
              "docs": [
                " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"
              ]
            },
            {
              "name": "MinCandidateStk",
              "type": 6,
              "value": "0x000050efe2d6e41a1b00000000000000",
              "docs": [
                " Minimum stake required for any account to be a collator candidate"
              ]
            },
            {
              "name": "MinDelegation",
              "type": 6,
              "value": "0x0000f444829163450000000000000000",
              "docs": [
                " Minimum stake for any registered on-chain account to delegate"
              ]
            },
            {
              "name": "MinDelegatorStk",
              "type": 6,
              "value": "0x0000f444829163450000000000000000",
              "docs": [
                " Minimum stake for any registered on-chain account to be a delegator"
              ]
            }
          ],
          "errors": {
            "type": 224
          },
          "index": 20
        },
        {
          "name": "AuthorInherent",
          "storage": {
            "prefix": "AuthorInherent",
            "items": [
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "HighestSlotSeen",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The highest slot that has been seen in the history of this chain.",
                  " This is a strictly-increasing value."
                ]
              }
            ]
          },
          "calls": {
            "type": 225
          },
          "events": null,
          "constants": [],
          "errors": {
            "type": 226
          },
          "index": 21
        },
        {
          "name": "AuthorFilter",
          "storage": {
            "prefix": "AuthorFilter",
            "items": [
              {
                "name": "EligibleRatio",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x32",
                "docs": []
              },
              {
                "name": "EligibleCount",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x32000000",
                "docs": [
                  " The number of active authors that will be eligible at each height."
                ]
              }
            ]
          },
          "calls": {
            "type": 227
          },
          "events": {
            "type": 38
          },
          "constants": [],
          "errors": null,
          "index": 22
        },
        {
          "name": "AuthorMapping",
          "storage": {
            "prefix": "AuthorMapping",
            "items": [
              {
                "name": "MappingWithDeposit",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 41,
                    "value": 228
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " We maintain a mapping from the NimbusIds used in the consensus layer",
                  " to the AccountIds runtime."
                ]
              },
              {
                "name": "NimbusLookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 41
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " We maintain a reverse mapping from AccountIds to NimbusIDS"
                ]
              }
            ]
          },
          "calls": {
            "type": 229
          },
          "events": {
            "type": 40
          },
          "constants": [],
          "errors": {
            "type": 230
          },
          "index": 23
        },
        {
          "name": "MoonbeamOrbiters",
          "storage": {
            "prefix": "MoonbeamOrbiters",
            "items": [
              {
                "name": "AccountLookupOverride",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 45
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Account lookup override"
                ]
              },
              {
                "name": "CollatorsPool",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 231
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Current orbiters, with their \"parent\" collator"
                ]
              },
              {
                "name": "CounterForCollatorsPool",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "CurrentRound",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current round index"
                ]
              },
              {
                "name": "MinOrbiterDeposit",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": [
                  " Minimum deposit required to be registered as an orbiter"
                ]
              },
              {
                "name": "OrbiterPerRound",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 217,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Store active orbiter per round and per parent collator"
                ]
              },
              {
                "name": "RegisteredOrbiter",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 32
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Check if account is an orbiter"
                ]
              }
            ]
          },
          "calls": {
            "type": 234
          },
          "events": {
            "type": 44
          },
          "constants": [],
          "errors": {
            "type": 235
          },
          "index": 24
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 236
          },
          "events": {
            "type": 46
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 363
          },
          "index": 30
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 364
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 368
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 239
          },
          "events": {
            "type": 49
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x0000362b4c8ee30d0000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x0040075af07507000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x0000362b4c8ee30d0000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x0000be9a2be513000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 372
          },
          "index": 31
        },
        {
          "name": "MaintenanceMode",
          "storage": {
            "prefix": "MaintenanceMode",
            "items": [
              {
                "name": "MaintenanceMode",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " Whether the site is in maintenance mode"
                ]
              }
            ]
          },
          "calls": {
            "type": 241
          },
          "events": {
            "type": 52
          },
          "constants": [],
          "errors": {
            "type": 373
          },
          "index": 32
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 374
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 278
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 378
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 380
                },
                "fallback": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "type": 242
          },
          "events": {
            "type": 53
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x00809842aa5f3c0e0000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x0080843faa7217000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x0040b310068bf30d0000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": {
            "type": 384
          },
          "index": 33
        },
        {
          "name": "Migrations",
          "storage": {
            "prefix": "Migrations",
            "items": [
              {
                "name": "FullyUpgraded",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " True if all required migrations have completed"
                ]
              },
              {
                "name": "MigrationState",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 32
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " MigrationState tracks the progress of a migration.",
                  " Maps name (Vec<u8>) -> whether or not migration has been completed (bool)"
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 54
          },
          "constants": [],
          "errors": null,
          "index": 34
        },
        {
          "name": "ProxyGenesisCompanion",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 35
        },
        {
          "name": "EthereumChainId",
          "storage": {
            "prefix": "EthereumChainId",
            "items": [
              {
                "name": "ChainId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 50
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 57,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 385,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 282
          },
          "events": {
            "type": 55
          },
          "constants": [],
          "errors": {
            "type": 386
          },
          "index": 51
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "plain": 387
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "plain": 396
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "plain": 401
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "plain": 402
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 59,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 287
          },
          "events": {
            "type": 61
          },
          "constants": [],
          "errors": {
            "type": 403
          },
          "index": 52
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "items": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "type": {
                  "plain": 59
                },
                "fallback": "0x00ca9a3b00000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "IsActive",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "type": {
                  "plain": 70
                },
                "fallback": "0x48e80100",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 297
          },
          "events": {
            "type": 69
          },
          "constants": [],
          "errors": null,
          "index": 53
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 404
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 72
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "type": 298
          },
          "events": {
            "type": 71
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x00e6bd4f57000000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 407
          },
          "index": 60
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 408
                },
                "fallback": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 410
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 411
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 412
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 415
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 420
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 421
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 32
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 422
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 301
          },
          "events": {
            "type": 75
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x201c0000",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0x201c0000",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0xa08c0000",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0x201c0000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x0000909dceda82370000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 32,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x84030000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0xe0c40000",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "errors": {
            "type": 423
          },
          "index": 61
        },
        {
          "name": "CouncilCollective",
          "storage": {
            "prefix": "CouncilCollective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 424
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 238
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 425
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 76
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 304
          },
          "events": {
            "type": 80
          },
          "constants": [],
          "errors": {
            "type": 426
          },
          "index": 70
        },
        {
          "name": "TechCommitteeCollective",
          "storage": {
            "prefix": "TechCommitteeCollective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 424
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 238
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 425
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 76
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 305
          },
          "events": {
            "type": 81
          },
          "constants": [],
          "errors": {
            "type": 427
          },
          "index": 71
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 428
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 429
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 306
          },
          "events": {
            "type": 82
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 70,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x000064a7b3b6e00d0000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 431,
              "value": "0x00",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0xc0a80000",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 70,
              "value": "0x00000000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 432,
              "value": "0x70792f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": {
            "type": 433
          },
          "index": 80
        },
        {
          "name": "CrowdloanRewards",
          "storage": {
            "prefix": "CrowdloanRewards",
            "items": [
              {
                "name": "AccountsPayable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 434
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ClaimedRelayChainIds",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 48
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UnassociatedContributions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 434
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Initialized",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "InitRelayBlock",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Vesting block height at the initialization of the pallet"
                ]
              },
              {
                "name": "EndRelayBlock",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Vesting block height at the initialization of the pallet"
                ]
              },
              {
                "name": "InitializedRewardAmount",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total initialized amount so far. We store this to make pallet funds == contributors reward",
                  " check easier and more efficient"
                ]
              },
              {
                "name": "TotalContributors",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Total number of contributors to aid hinting benchmarking"
                ]
              }
            ]
          },
          "calls": {
            "type": 307
          },
          "events": {
            "type": 83
          },
          "constants": [
            {
              "name": "InitializationPayment",
              "type": 37,
              "value": "0x00a3e111",
              "docs": [
                " Percentage to be payed at initialization"
              ]
            },
            {
              "name": "MaxInitContributors",
              "type": 4,
              "value": "0xf4010000",
              "docs": []
            },
            {
              "name": "RewardAddressRelayVoteThreshold",
              "type": 37,
              "value": "0x00ca9a3b",
              "docs": [
                " A fraction representing the percentage of proofs",
                " that need to be presented to change a reward address through the relay keys"
              ]
            },
            {
              "name": "SignatureNetworkIdentifier",
              "type": 11,
              "value": "0x286d6f6f6e72697665722d",
              "docs": [
                " Network Identifier to be appended into the signatures for reward address change/association",
                " Prevents replay attacks from one network to the other"
              ]
            }
          ],
          "errors": {
            "type": 436
          },
          "index": 90
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "items": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 437
                },
                "fallback": "0x00",
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 443,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 444
                },
                "fallback": "0x00",
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 447,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 87,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "type": {
                  "plain": 448
                },
                "fallback": "0x020000000500000001000000a086010000000000020000000000000000c817a804000000",
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 449
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "type": {
                  "plain": 32
                },
                "fallback": "0x00",
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 84
          },
          "constants": [],
          "errors": {
            "type": 450
          },
          "index": 100
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": null,
          "events": {
            "type": 88
          },
          "constants": [],
          "errors": {
            "type": 451
          },
          "index": 101
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "items": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "type": {
                  "plain": 452
                },
                "fallback": "0x00e40b5402000000",
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "type": {
                  "plain": 453
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 454
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 455
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The overweight messages."
                ]
              }
            ]
          },
          "calls": {
            "type": 318
          },
          "events": {
            "type": 91
          },
          "constants": [],
          "errors": {
            "type": 456
          },
          "index": 102
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "items": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 457
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 461,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 461,
                    "value": 8
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 461,
                    "value": 462
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "type": {
                  "plain": 463
                },
                "fallback": "0x00",
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "type": {
                  "plain": 466
                },
                "fallback": "0x00",
                "docs": [
                  " The current migration's stage, if any."
                ]
              }
            ]
          },
          "calls": {
            "type": 319
          },
          "events": {
            "type": 92
          },
          "constants": [],
          "errors": {
            "type": 467
          },
          "index": 103
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 468
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 469,
                    "value": 470
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 472,
                    "value": 473
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 474
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "type": 344
          },
          "events": {
            "type": 128
          },
          "constants": [
            {
              "name": "AssetDeposit",
              "type": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "type": 6,
              "value": "0x0080fccfca1be70d0000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": 6,
              "value": "0x0000dd0744dff80d0000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "errors": {
            "type": 476
          },
          "index": 104
        },
        {
          "name": "AssetManager",
          "storage": {
            "prefix": "AssetManager",
            "items": [
              {
                "name": "AssetIdType",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 130
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from an asset id to asset type.",
                  " This is mostly used when receiving transaction specifying an asset directly,",
                  " like transferring an asset from this chain to another."
                ]
              },
              {
                "name": "AssetTypeId",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 130,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.",
                  " This is mostly used when receiving a multilocation XCM message to retrieve",
                  " the corresponding asset in which tokens should me minted."
                ]
              },
              {
                "name": "AssetTypeUnitsPerSecond",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 130,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the units per second for local execution for a AssetType.",
                  " This is used to know how to charge for XCM execution in a particular",
                  " asset",
                  " Not all assets might contain units per second, hence the different storage"
                ]
              },
              {
                "name": "LocalAssetCounter",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Stores the counter of the number of local assets that have been",
                  " created so far",
                  " This value can be used to salt the creation of an assetId, e.g.,",
                  " by hashing it. This is particularly useful for cases like moonbeam",
                  " where letting users choose their assetId would result in collision",
                  " in the evm side."
                ]
              },
              {
                "name": "LocalAssetDeposit",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 477
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Local asset deposits, a mapping from assetId to a struct",
                  " holding the creator (from which the deposit was reserved) and",
                  " the deposit amount"
                ]
              },
              {
                "name": "SupportedFeePaymentAssets",
                "modifier": "Default",
                "type": {
                  "plain": 478
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 346
          },
          "events": {
            "type": 129
          },
          "constants": [
            {
              "name": "LocalAssetDeposit",
              "type": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for a local asset."
              ]
            }
          ],
          "errors": {
            "type": 479
          },
          "index": 105
        },
        {
          "name": "XTokens",
          "storage": {
            "prefix": "XTokens",
            "items": []
          },
          "calls": {
            "type": 347
          },
          "events": {
            "type": 132
          },
          "constants": [
            {
              "name": "SelfLocation",
              "type": 93,
              "value": "0x0000",
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "type": 8,
              "value": "0x00e1f50500000000",
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "errors": {
            "type": 480
          },
          "index": 106
        },
        {
          "name": "XcmTransactor",
          "storage": {
            "prefix": "XcmTransactor",
            "items": [
              {
                "name": "IndexToAccount",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 51,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Since we are using pallet-utility for account derivation (through AsDerivative),",
                  " we need to provide an index for the account derivation. This storage item stores the index",
                  " assigned for a given local account. These indices are usable as derivative in the relay chain"
                ]
              },
              {
                "name": "TransactInfoWithWeightLimit",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 93,
                    "value": 134
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the transact info of a MultiLocation. This defines how much extra weight we need to",
                  " add when we want to transact in the destination chain and maximum amount of weight allowed",
                  " by the destination chain"
                ]
              },
              {
                "name": "DestinationAssetFeePerSecond",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the fee per second for an asset in its reserve chain. This allows us to convert",
                  " from weight to fee"
                ]
              }
            ]
          },
          "calls": {
            "type": 352
          },
          "events": {
            "type": 133
          },
          "constants": [
            {
              "name": "SelfLocation",
              "type": 93,
              "value": "0x0000",
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "type": 8,
              "value": "0x00e1f50500000000",
              "docs": [
                "",
                " The actual weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "errors": {
            "type": 481
          },
          "index": 107
        },
        {
          "name": "LocalAssets",
          "storage": {
            "prefix": "LocalAssets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 468
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 469,
                    "value": 470
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 472,
                    "value": 473
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 474
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "type": 354
          },
          "events": {
            "type": 136
          },
          "constants": [
            {
              "name": "AssetDeposit",
              "type": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "type": 6,
              "value": "0x0080fccfca1be70d0000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": 6,
              "value": "0x0000dd0744dff80d0000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "errors": {
            "type": 482
          },
          "index": 108
        }
      ],
      "extrinsic": {
        "type": 483,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 486,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 487,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 488,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 489,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 491,
            "additionalSigned": 48
          },
          {
            "identifier": "CheckWeight",
            "type": 492,
            "additionalSigned": 48
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 493,
            "additionalSigned": 48
          }
        ]
      },
      "type": 495
    }
  }
}